import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
import json
import asyncio
import os
from datetime import datetime
from background import keep_alive
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7809565448:AAFsfuInMk7bjzIGQ52nZTjjFgaFzYP5AA4"
ADMIN_ID = 359505266  # –í–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
USER_DATA_FILE = "user.json"
#dsdasdas
# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
def load_user_data():
    if os.path.exists(USER_DATA_FILE) and os.path.getsize(USER_DATA_FILE) > 0:
        with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ —Ñ–∞–π–ª
def save_user_data(user_data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=4)

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
CHANNELS = [
    {"name": "–ö–∞–Ω–∞–ª #1", "link": "https://t.me/+Nan6BOsZLTs3ZmVi", "is_private": True},  
    {"name": "–ö–∞–Ω–∞–ª #2", "link": "https://t.me/+3ttP3hB81AgwOThi", "is_private": True},  
]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–¥—ã —Ñ–∏–ª—å–º–æ–≤ –∏–∑ JSON
with open("films.json", "r", encoding="utf-8") as f:
    FILMS = json.load(f)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_subscribed(user_id: int) -> bool:
    # –ï—Å–ª–∏ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    if all(channel["is_private"] for channel in CHANNELS):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    for channel in CHANNELS:
        if not channel["is_private"]:
            try:
                member = await bot.get_chat_member(channel["id"], user_id)
                if member.status in ["left", "kicked"]:
                    return False
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {channel['id']}: {e}")
                return False
    return True

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
def get_subscription_keyboard():
    keyboard = []
    row = []
    
    for channel in CHANNELS:
        btn_text = f"{channel['name']}"
        btn_url = channel["link"] if channel["is_private"] else f"https://t.me/{channel['id'].lstrip('@')}"
        button = InlineKeyboardButton(text=btn_text, url=btn_url)
        
        row.append(button)
        if len(row) == 2:  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –ø–æ 2
            keyboard.append(row)
            row = []
    
    if row:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ 3 –∫–∞–Ω–∞–ª–∞—Ö)
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    keyboard.append([InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(message: types.Message):
    user_data = load_user_data()
    user_id = str(message.from_user.id)

    if user_id not in user_data:
        current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        user_data[user_id] = {
            "id": message.from_user.id,
            "full_name": message.from_user.full_name,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "language_code": message.from_user.language_code,
            "join_date": current_datetime,
        }
        save_user_data(user_data)
        
        await bot.send_message(
				ADMIN_ID,
				f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
				f"ID: {user_data[user_id]['id']}\n"
				f"full_name: {user_data[user_id]['full_name']}\n"
				f"username: @{user_data[user_id]['username']}\n"
				f"First Name: {user_data[user_id]['first_name']}\n"
				f"Last Name: {user_data[user_id]['last_name']}\n"
				f"language: {user_data[user_id]['language_code']}\n"
				f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data[user_id]['join_date']}",
)

    # –ï—Å–ª–∏ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
    if all(channel["is_private"] for channel in CHANNELS):
        await message.answer(
            "‚úã –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.\n\n"
            "_–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª!_",
            parse_mode="Markdown",
            reply_markup=get_subscription_keyboard(),
        )
    else:
        if await is_subscribed(message.from_user.id):
            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞:")
        else:
            await message.answer(
                "‚úã –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.\n\n"
                "_–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª!_",
                parse_mode="Markdown",
                reply_markup=get_subscription_keyboard(),
            )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
async def button_handler(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    user_data = load_user_data()
     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞–∂–∏–º–∞–ª "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç
    if not user_data.get(user_id, {}).get("attempted_continue", False):
        user_data.setdefault(user_id, {})["attempted_continue"] = True
        save_user_data(user_data)

        await bot.answer_callback_query(
            callback_query.id,
            "‚õîÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            show_alert=True
        )
        return  # –í—ã—Ö–æ–¥, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–∞–ª—å—à–µ
    
    user_data[user_id]["confirmed"] = True
    save_user_data(user_data)

    # –ï—Å–ª–∏ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    if all(channel["is_private"] for channel in CHANNELS):
        await bot.edit_message_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞:",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )
        return
    else:
        if await is_subscribed(callback_query.from_user.id):
            await bot.edit_message_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞:",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id
            )
        else:
            await bot.answer_callback_query(
                callback_query.id,
                "‚õîÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                show_alert=True
            )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ —Ñ–∏–ª—å–º–∞
async def handle_code(message: types.Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥: {message.text.strip()}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥

    user_data = load_user_data()
    user_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    if all(channel["is_private"] for channel in CHANNELS) and not user_data.get(user_id, {}).get("confirmed", False):
        await message.answer("‚õîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –∫–æ–¥–∞.")
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    user_data.setdefault(user_id, {}).setdefault("code_attempts", 0)
    user_data[user_id]["code_attempts"] += 1

    film_data = FILMS.get(message.text.strip())
    if film_data:
        logging.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∏–ª—å–º: {film_data['title']}")
        await message.answer(f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {film_data['title']}")
    else:
        logging.info("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–¥ 5 —Ä–∞–∑, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
    if user_data[user_id]["code_attempts"] >= 5:
        user_data[user_id]["confirmed"] = False
        user_data[user_id]["attempted_continue"] = False
        user_data[user_id]["code_attempts"] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")

    save_user_data(user_data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–¥–∞
def get_next_code():
    if FILMS:
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ 1
        max_code = max(int(k) for k in FILMS.keys())
        return f"{max_code + 1:03d}"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ (001, 002 –∏ —Ç.–¥.)
    else:
        return "001"  # –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å 001

# –ö–æ–º–∞–Ω–¥–∞ /addfilm (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async def add_film(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        next_code = get_next_code()
        await message.answer(
            f"üìù –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            f"`/addfilm –ö–û–î:–ù–ê–ó–í–ê–ù–ò–ï`\n\n"
            f"–ü—Ä–∏–º–µ—Ä:\n"
            f"`/addfilm {next_code}:–ù–æ–≤—ã–π —Ñ–∏–ª—å–º`\n\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–¥: `{next_code}`",
            parse_mode="Markdown",
        )
    else:
        await message.answer("‚õîÔ∏è –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞
async def add_film_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        _, film_data = message.text.split(" ", 1)
        code, name = film_data.split(":", 1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–¥
        if code.strip() in FILMS:
            await message.answer(f"‚ùå –ö–æ–¥ `{code}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥.", parse_mode="Markdown")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º –≤ —Å–ª–æ–≤–∞—Ä—å
        FILMS[code.strip()] = {"title": name.strip()}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–∞–π–ª
        with open("films.json", "w", encoding="utf-8") as f:
            json.dump(FILMS, f, ensure_ascii=False, indent=4)

        await message.answer(f"‚úÖ –§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω:\n–ö–æ–¥: `{code}`\n–ù–∞–∑–≤–∞–Ω–∏–µ: `{name}`", parse_mode="Markdown")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/addfilm –ö–û–î:–ù–ê–ó–í–ê–ù–ò–ï`", parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", parse_mode="Markdown")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dp.message.register(start, Command("start"))
dp.callback_query.register(button_handler)
dp.message.register(handle_code, lambda message: not message.text.startswith("/"))
dp.message.register(add_film_handler, lambda message: message.text.startswith("/addfilm ") and ":" in message.text)
dp.message.register(add_film, Command("addfilm"))

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)
keep_alive()
if __name__ == "__main__":
    asyncio.run(main())
